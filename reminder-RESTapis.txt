*An API for a website is code that allows two software programs to communicate with each another.
* The API spells out the proper way for a developer to write a program requesting services from an operating system or other application.
*In a web service, the Web technology such as HTTP—originally designed for human-to-machine communication—is utilized for machine-to-machine communication,
  more specifically for transferring machine-readable file formats such as XML and JSON.
* RESTful web services allow the requesting systems to access and manipulate textual representations of web resources by using a uniform and predefined set of stateless operations.
* In practice, a web service commonly provides an object-oriented web-based interface to a database server, utilized for example by another web server,
  or by a mobile app, that provides a user interface to the end user.
* "Web resources" were first defined on the World Wide Web as documents or files identified by their URLs. However, today they have a much more generic and abstract
  definition that encompasses every thing or entity that can be identified, named, addressed, or handled, in any way whatsoever, on the web.
* By using a stateless protocol and standard operations, RESTful systems aim for fast performance, reliability, and the ability to grow,
  by re-using components that can be managed and updated without affecting the system as a whole, even while it is running.
* In a RESTful web service, requests made to a resource's URI will elicit a response with a payload formatted in either HTML, XML, JSON, or some other format.
  The response can confirm that some alteration has been made to the stored resource, and the response can provide hypertext links to other related resources
  or collections of resources. When HTTP is used, as is most common, the operations available are GET, POST, PUT, DELETE, and other predefined CRUD HTTP methods.
*A RESTful API use: => GET to retrieve a resource;
                    => PUT to change the state of or update a resource, which can be an object, file or block;
                    => POST to create that resource;
                    => DELETE to remove it.



CREATING HTTP POST REQUEST
------------------------------------------------------------------------------------------------------------------------------------
* we have made separate files for server, mongoose configuration and 2 files for models
* in models files we dont need to include mongoose file that we made, we include library for mongoose

* we need to install express: npm install express@4.14.0 body-parser@1.15.2  --save
* body-parser module: => let us send JSON to server, server can than take that JSON and do something with it
                    => practicly body-parser parses the body, it takes string body and turns it to js object
*then we need to include these modules into server.js file
=> after this we can make simple server with: var app= express();
                                              app.listen(3000,()=>{ console.log('Server started on port 3000');});

=>then we can start configuring our routes (POST)--> which will let us do CRUD operations
                                                 => when you want to create resource you use post http method and you send that resource as a body
                                                 => we will send JSON objects to server
-url for REST api is realy important and must have proper structure => for creating resource '/name-of-collection'
-for geting body data that got sent from the client =>we have to use a body-parser module
                                                   => it is going to take JSON and convert it to an object ataching it on request object
- we need to configure the middleware with app.use => which takes the middleware-lets you configure how your express app works
                                                    =>if we write the custom middleware it will be a function
                                                    =>if we are using 3rd party middleware we usualy just access something of a library
                                                    =>app.use(bodyParser.json())
                                                    => return value of json() method is function and that is the middleware we need to give to express
                                                    =>now we can send json to our express aplication
                                                    =>after that we can start server and test in postman
                                                    =>POST localhost:3000/todos
                                                    =>in order to send some data to application:=> body database
                                                                                                => raw
                                                                                                => JSON(aplication/json)
                                                                                                =>then we write object in postman for sending
                                                                                                ---for example:
                                                                                                {  "text": "This is from postman" }
TESTING
---------------------------------------------------------------------------------------------------------------------------------------------
*we need to install and include modules for testing: => npm i expect@1.20.2 mocha@3.0.2 nodemon@1.10.2 supertest@2.0.0 --save-dev
                                                     => we have nodemon installed on global level but since we are using it inside of package.json script
                                                        we installed it localy as well.
*we need to set scripts in package.json: "test":"mocha server/**/*.test.js"  and "test-watch":"nodemon --exec 'npm test'"
*we use test watch to every time we change app test rerun
*we need to include expect and supertest module in our test file, there is no need to require mocha-that isnt way of usage for it
*we need to require express app from server file: const {app}=require('./../server');
*then we need to require model variable
*creating async test: => it('should...',(done)=>{});
                      => we have to specify done because we will make async test
                      => inside of callback: => we are creating variable of property of model we will send and define some value for it
                                             => var property= 'for example some string';
                                             => now we will make request with supertest, and pass it a app we want to made request on
                                             => request(app).post('/name_of_collection').send({property})
                                             => send is method that we use for sending the data along with request
                                             =>we are passing object to it which will be converted to JSON by supertest so we dont need to worry about that
                                             =>now when we sent request we can start making assertions about the request
                                             =>expect(200)
                                             =>now we can make assertion about body that comes back:
                                             =>we will make custom expect assertion: these calls do get passed the response and we can use that response
                                              inside of an function
                                              =>inside of that function we will expect that response.body.property_name has that property and then some
                                                expect method for assertions about property
                                              ---for example: expect((res)=>
                                                                {
                                                                  expect(res.body.text).toBe(text);
                                                                });
                                             => we want to check what is actually stored in mongodb collection: this is reason we loaded  models
                                             => instead passing done to end() statement on the end, we will pass function to it
                                             =>this callback function would get called with an error and the response as arguments
                                             =>it will alows to us to do a few things:
                                                1) handling error that might occur above
                                                 ---for example:     end((err,res)=>
                                                                        {
                                                                          if(err)
                                                                          {
                                                                            return done(err);
                                                                          }
                                                                        })
                                                    =>this is going to wrap up a test printing the error to the scren so test will fail
                                                2) we will make request to the db fetching all todos verifying that our new todo is indead added:
                                                ---for example:  Todo.find()
                                                  we can attach then callback to it, we will call this function with all todos and we can make some assertions about that
                                                  in this example we try to see that our todo exists
                                                ---for example:  Todo.find().then((todos)=>{
                                                                                    expect(todos.lenght).toBe(1);
                                                                                    expect(todos[0].text).toBe(text);
                                                                                    done();
                                                                                    })
                                                                              .catch((e)=>{done(e);});

                                              =>on the end we will add testing life cycle method beforeEach which will alow to us to run it before every describe block
                                              =>if you want something to be called before oters you should use before
                                              => it takes function as argument which will have done as argument
                                              =>we have to write it above test cases and we use it to make database useful
                                              ---for example: we want to clear database and we pass empty object to remove
                                                                                        beforeEach((done)=>
                                                                                        {
                                                                                          Todo.remove({}).then(()=>done());
                                                                                        });
ADDITIONAL ON MONGOOSE QUERY-ing
---------------------------------------------------------------------------------------------------------------------------------------------
HOW TO VALIDATE OBJECT IDs
-----------------------------------
*when we are passing the query to find function and want to find document by id, we can pass string
 mongoose will convert it to ObjectId for us before makes search : find({ _id: id }) where id is our string variable

*findOne method is similar to find but it will always return one document only instead of array, it will grabs first one that matches the query
*findById- recomended method

*for all of this methods if there is no such docs, there will not occur any error, for find we will get empty array back and in case of other two methods null
*for example error will occur if id is longer than it should be =>cast error
=>to handle this we can include ObjectID :const {ObjectID}=require('mongodb'); and use its function isValid=> if(!ObjectID.isValid(idTodo))

GETTING AN INDIVIDUAL RESOURCE- CREATING API ROUTE
---------------------------------------------------------------------------------------------------------------------------------------------
*first we need to make a part of url dynamic=>url parameter
                                            =>pattern: :name
                                            => this is going to create name variable,it is going to be onrequest object and we are going to be able to access it
                                            ---for example: app.get('/todos/:id',(req,res)=>{ *   });
                                            =>when someone make this request this callback will fire and inside of it we will be able to query by id
                                            =>request.params => it is going to be an object which will have key-value pairs where key is url parameter
TESTING GET /todos/:id
-----------------------------
*we are passing array of documents to database with ids made by new ObjectId : const todos=[ { _id: new ObjectID(),text: 'First test todo' },...
=> then we can pass that id to url like: request(app).get(`/todos/${todos[0]._id.toHexString()}`)
=> we have to convert it to string because ObjectID object is not what we want to pass to url

DEPLOYING TO HEROKU
--------------------------
*we need to set up real MongoDB database because we currently use mongodb://localhost
*in server we need to create PORT variable-it will be set if the app is running on heroku and not if is running localy: const port=process.env.PORT || 3000;
*in package.json: 1) we need to tell heroku how to start a project: => in scripts we make "start" script
                                                                    =>"start":"node server/server.js"
                  2) tell heroku which version of node we want to use: => we run node -v to see which version we use
                                                                       => we are setting "engines" property which let us specify various versions for things
                                                                          heroku let us configure
                                                                       =>"node": "11.1.0"
